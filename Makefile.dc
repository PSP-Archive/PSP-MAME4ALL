TARGET = mame4all

ifeq ($(target), aged)
MAME4ALL_AGED=1
else
ifeq ($(target), classic)
MAME4ALL_CLASSIC=1
else
MAME4ALL_GOLD=1
endif
endif

RAZE_IS_FAZE=1

#KOS_AS = $(KOS_CCPLUS) -ml -m4-single-only  -c

OPTFLAGS=-O3 -fomit-frame-pointer -ffast-math
#OPTFLAGS=-Os -fomit-frame-pointer -ffast-math -g0

OPTFLAGS+= -falign-functions=32 -falign-labels=32 -falign-loops=32 -falign-jumps=32

OPT_CFLAGS+= -fstrict-aliasing -fexpensive-optimizations -fweb -frename-registers

OPT_CFLAGS+= -finline -finline-functions -fno-builtin -fno-common

MORE_CFLAGS+= -I$(KOS_BASE)/addons/include/SDL -I$(KOS_BASE)/addons/include $(OPTFLAGS)

#MORE_CFLAGS += -W -Wall -Wno-sign-compare -Wno-unused -Wpointer-arith -Wbad-function-cast -Wcast-align -Waggregate-return -Wshadow -Wstrict-prototypes 

#MORE_CFLAGS += -std=c99

MORE_CFLAGS += -Isrc -Isrc/sdl -DDREAMCAST -DROM_PREFIX="/cd/" -DDATA_PREFIX="/cd/"  -DROM_SD_PREFIX="/sd/mame4all/" -DDATA_SD_PREFIX="/sd/mame4all/"

MORE_CFLAGS += -DLSB_FIRST -DSIGNED_SAMPLES -DACORN -DINLINE=STATIC_INLINE_DREAMCAST

MORE_CFLAGS +=	-Isrc/z80 -Isrc/m6502 -Isrc/m6809 -Isrc/i86 -Isrc/tms34010 -Isrc/tms9900 

include config.mk

MORE_CFLAGS +=	-DMITSHM $(DEFS) -DUNZIP_SUPPORT -DZLIB -DHAVE_MKSTEMP  \
		-DACCEPT_SIZE_T=int

KOS_CFLAGS += $(MORE_CFLAGS)
KOS_CPPFLAGS += $(MORE_CFLAGS)
#KOS_AFLAGS = $(MORE_CFLAGS)


all: $(TARGET).bin

include $(KOS_BASE)/Makefile.rules

KOS_CPPFLAGS=-fno-operator-names -fno-exceptions

FAZE_OPTS= -DAUTODOWN_IRQS -DUSE_MAME_FETCH -DMAME_CLOCK_FLUSHING -DEMULATE_UNDOC_FLAGS -DEMULATE_R_REGISTER -DNO_EXTRA_CYCLES -DAUTODOWN_IRQS -DNO_PC_LIMIT

ifndef MAME4ALL_GOLD
FAZE_OPTS+= -DMAME_SET_PC 
#KOS_CPPFLAGS+= -DFILECACHE_TILE=4096
else
KOS_CPPFLAGS+= -DSOUND_USEVOLUME_SHIFTS
endif

src/raze/faze/raze.s: src/raze/faze/raze.s.m4
	m4 $(FAZE_OPTS) -Isrc/raze/faze/ src/raze/faze/raze.s.m4 > src/raze/faze/raze.s


src/raze/faze/raze_1.s: src/raze/faze/raze.s
	sed -e "s/z80_set_reti/z80_set_reti_1/g" -e "s/z80_set_out/z80_set_out_1/g" -e "s/z80_set_in/z80_set_in_1/g" -e "s/z80_add_write/z80_add_write_1/g" -e "s/z80_add_read/z80_add_read_1/g" -e "s/z80_map_write/z80_map_write_1/g" -e "s/z80_map_read/z80_map_read_1/g" -e "s/z80_map_fetch/z80_map_fetch_1/g" -e "s/z80_end_memmap/z80_end_memmap_1/g" -e "s/z80_init_memmap/z80_init_memmap_1/g" -e "s/z80_set_reg/z80_set_reg_1/g" -e "s/z80_get_reg/z80_get_reg_1/g" -e "s/z80_do_wait_states/z80_do_wait_states_1/g" -e "s/z80_skip_idle/z80_skip_idle_1/g" -e "s/z80_stop_emulating/z80_stop_emulating_1/g" -e "s/z80_get_cycles_elapsed/z80_get_cycles_elapsed_1/g" -e "s/z80_get_context/z80_get_context_1/g" -e "s/z80_emulate/z80_emulate_1/g" -e "s/z80_set_fetch_callback/z80_set_fetch_callback_1/g" -e "s/z80_reset/z80_reset_1/g" -e "s/z80_raise_IRQ/z80_raise_IRQ_1/g" -e "s/z80_lower_IRQ/z80_lower_IRQ_1/g" -e "s/z80_cause_NMI/z80_cause_NMI_1/g" -e "s/z80_set_context/z80_set_context_1/g" src/raze/faze/raze.s > src/raze/faze/raze_1.s
	
src/raze/faze/raze_2.s: src/raze/faze/raze.s
	sed -e "s/z80_set_reti/z80_set_reti_2/g" -e "s/z80_set_out/z80_set_out_2/g" -e "s/z80_set_in/z80_set_in_2/g" -e "s/z80_add_write/z80_add_write_2/g" -e "s/z80_add_read/z80_add_read_2/g" -e "s/z80_map_write/z80_map_write_2/g" -e "s/z80_map_read/z80_map_read_2/g" -e "s/z80_map_fetch/z80_map_fetch_2/g" -e "s/z80_end_memmap/z80_end_memmap_2/g" -e "s/z80_init_memmap/z80_init_memmap_2/g" -e "s/z80_set_reg/z80_set_reg_2/g" -e "s/z80_get_reg/z80_get_reg_2/g" -e "s/z80_do_wait_states/z80_do_wait_states_2/g" -e "s/z80_skip_idle/z80_skip_idle_2/g" -e "s/z80_stop_emulating/z80_stop_emulating_2/g" -e "s/z80_get_cycles_elapsed/z80_get_cycles_elapsed_2/g" -e "s/z80_get_context/z80_get_context_2/g" -e "s/z80_emulate/z80_emulate_2/g" -e "s/z80_set_fetch_callback/z80_set_fetch_callback_2/g" -e "s/z80_reset/z80_reset_2/g" -e "s/z80_raise_IRQ/z80_raise_IRQ_2/g" -e "s/z80_lower_IRQ/z80_lower_IRQ_2/g" -e "s/z80_cause_NMI/z80_cause_NMI_2/g" -e "s/z80_set_context/z80_set_context_2/g" src/raze/faze/raze.s > src/raze/faze/raze_2.s
	
src/raze/faze/raze_3.s: src/raze/faze/raze.s
	sed -e "s/z80_set_reti/z80_set_reti_3/g" -e "s/z80_set_out/z80_set_out_3/g" -e "s/z80_set_in/z80_set_in_3/g" -e "s/z80_add_write/z80_add_write_3/g" -e "s/z80_add_read/z80_add_read_3/g" -e "s/z80_map_write/z80_map_write_3/g" -e "s/z80_map_read/z80_map_read_3/g" -e "s/z80_map_fetch/z80_map_fetch_3/g" -e "s/z80_end_memmap/z80_end_memmap_3/g" -e "s/z80_init_memmap/z80_init_memmap_3/g" -e "s/z80_set_reg/z80_set_reg_3/g" -e "s/z80_get_reg/z80_get_reg_3/g" -e "s/z80_do_wait_states/z80_do_wait_states_3/g" -e "s/z80_skip_idle/z80_skip_idle_3/g" -e "s/z80_stop_emulating/z80_stop_emulating_3/g" -e "s/z80_get_cycles_elapsed/z80_get_cycles_elapsed_3/g" -e "s/z80_get_context/z80_get_context_3/g" -e "s/z80_emulate/z80_emulate_3/g" -e "s/z80_set_fetch_callback/z80_set_fetch_callback_3/g" -e "s/z80_reset/z80_reset_3/g" -e "s/z80_raise_IRQ/z80_raise_IRQ_3/g" -e "s/z80_lower_IRQ/z80_lower_IRQ_3/g" -e "s/z80_cause_NMI/z80_cause_NMI_3/g" -e "s/z80_set_context/z80_set_context_3/g" src/raze/faze/raze.s > src/raze/faze/raze_3.s
	
src/raze/faze/raze_4.s: src/raze/faze/raze.s
	sed -e "s/z80_set_reti/z80_set_reti_4/g" -e "s/z80_set_out/z80_set_out_4/g" -e "s/z80_set_in/z80_set_in_4/g" -e "s/z80_add_write/z80_add_write_4/g" -e "s/z80_add_read/z80_add_read_4/g" -e "s/z80_map_write/z80_map_write_4/g" -e "s/z80_map_read/z80_map_read_4/g" -e "s/z80_map_fetch/z80_map_fetch_4/g" -e "s/z80_end_memmap/z80_end_memmap_4/g" -e "s/z80_init_memmap/z80_init_memmap_4/g" -e "s/z80_set_reg/z80_set_reg_4/g" -e "s/z80_get_reg/z80_get_reg_4/g" -e "s/z80_do_wait_states/z80_do_wait_states_4/g" -e "s/z80_skip_idle/z80_skip_idle_4/g" -e "s/z80_stop_emulating/z80_stop_emulating_4/g" -e "s/z80_get_cycles_elapsed/z80_get_cycles_elapsed_4/g" -e "s/z80_get_context/z80_get_context_4/g" -e "s/z80_emulate/z80_emulate_4/g" -e "s/z80_set_fetch_callback/z80_set_fetch_callback_4/g" -e "s/z80_reset/z80_reset_4/g" -e "s/z80_raise_IRQ/z80_raise_IRQ_4/g" -e "s/z80_lower_IRQ/z80_lower_IRQ_4/g" -e "s/z80_cause_NMI/z80_cause_NMI_4/g" -e "s/z80_set_context/z80_set_context_4/g" src/raze/faze/raze.s > src/raze/faze/raze_4.s
	
src/raze/faze/raze.o: src/raze/faze/raze.s
	${KOS_AS} --little -o src/raze/faze/raze.o src/raze/faze/raze.s

src/raze/faze/raze_1.o: src/raze/faze/raze_1.s
	${KOS_AS} --little -o src/raze/faze/raze_1.o src/raze/faze/raze_1.s

src/raze/faze/raze_2.o: src/raze/faze/raze_2.s
	${KOS_AS} --little -o src/raze/faze/raze_2.o src/raze/faze/raze_2.s

src/raze/faze/raze_3.o: src/raze/faze/raze_3.s
	${KOS_AS} --little -o src/raze/faze/raze_3.o src/raze/faze/raze_3.s

src/raze/faze/raze_4.o: src/raze/faze/raze_4.s
	${KOS_AS} --little -o src/raze/faze/raze_4.o src/raze/faze/raze_4.s


include objs.mk

# OBJS+=romdisk.o

romdisk.o: romdisk.img
#	$(KOS_BASE)/utils/bin2o/bin2o romdisk.img romdisk romdisk.o
	bin2odc romdisk.img romdisk.o

romdisk.img:
	$(KOS_GENROMFS) -f romdisk.img -d data -v

$(TARGET).elf: $(OBJS) $(OBJS_CPU) $(DRIVERS)
	$(KOS_CC) $(KOS_CFLAGS) $(KOS_LDFLAGS) -o $(TARGET).elf $(KOS_START) \
	$(OBJS_CPU) $(DRIVERS) $(OBJS) $(OBJEXTRA) -lSDL_mixer_126 -lSDL_1213 -lz_123 -lm  $(KOS_LIBS)

$(TARGET).bin: $(TARGET).elf
	$(KOS_OBJCOPY) -R .stack -O binary $(TARGET).elf $(TARGET).bin

#example.iso: roms
#	mkisofs -joliet-long -l -o example.iso -graft-points /roms=roms/

run: $(TARGET).bin example.iso
	$(KOS_LOADER) $(TARGET).bin -i example.iso

#run: $(TARGET).bin
#	$(KOS_LOADER) $(TARGET).bin -o 250000



clean:
	rm -f $(OBJS) src/raze/faze/raze.s $(TARGET).elf $(TARGET).bin romdisk.o romdisk.img 
